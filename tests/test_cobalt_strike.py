import base64
import json
import os
import zlib

from elasticsearch import Elasticsearch
from malduck import procmem
from malduck.extractor import ExtractManager, ExtractorModules
from scalpl import Cut

from elastic.malware_config_extractor.modules.cobalt_strike import CobaltStrike
from elastic.malware_config_extractor.transform import MalduckTransform


# debugging path problems
def test_current():
    print(f" CURRENT PATH IS {os.getenv('PYTEST_CURRENT_TEST')}")


def test_from_file():
    """unit test for the module"""
    with procmem.from_file("tests/beacon-sample.bin") as p:
        mem: bytes = p.readv(addr=0)

    extractor_modules = ExtractorModules(
        modules_path=os.path.join(os.path.dirname(__file__), "modules")
    )
    extract_manager = ExtractManager(extractor_modules)

    striker = CobaltStrike(extract_manager)  # todo: this is throwing an error
    config: dict = striker.cobaltstrike(p=mem)
    assert "cobaltstrike" in config


def test_from_telemetry_file():
    """Uses a json of the telemetry query response, rather than querying elasticsearch each time"""
    with open("tests/cobalt_strike_telemetry_result.json", "r") as f:
        raw = f.read()
    result = json.loads(raw)
    cobalt_strike_bytes = result["hits"]["hits"][0]["_source"]["process"]["Ext"][
        "memory_region"
    ]["bytes_compressed"]
    payload = zlib.decompress(base64.b64decode(cobalt_strike_bytes))
    addr = result["hits"]["hits"][0]["_source"]["process"]["Ext"]["memory_region"]["bytes_address"]

    extractor_modules = ExtractorModules(
        modules_path=os.path.join(os.path.dirname(__file__), "modules")
    )
    extract_manager = ExtractManager(extractor_modules)

    striker = CobaltStrike(extract_manager)
    config: dict = striker.cobaltstrike(p=payload, addr=addr)
    assert "cobaltstrike" in config


def test_from_telemetry_data():
    """integration test, pulls a known cobalt strike sample from the analytics cluster using the alert id"""

    query = {
        "query": {"match": {"_id": "MYmZpgexS5wCm6JS+++++/DM-2022-04-05T20:27:17Z"}}
    }
    encoded_key = os.getenv("API_KEY")
    decoded_key = base64.b64decode(encoded_key).decode('utf-8').split(':')
    es = Elasticsearch(
        cloud_id=os.getenv("ANALYTICS_CLOUD_ID"),
        api_key= decoded_key,
    )

    result = es.search(body=query, index="alert_telemetry_elastic")

    cobalt_strike_bytes = result["hits"]["hits"][0]["_source"]["process"]["Ext"][
        "memory_region"
    ]["bytes_compressed"]
    payload = zlib.decompress(base64.b64decode(cobalt_strike_bytes))
    addr = result["hits"]["hits"][0]["_source"]["process"]["Ext"]["memory_region"]["bytes_address"]

    extractor_modules = ExtractorModules(
        modules_path=os.path.join(os.path.dirname(__file__), "modules")
    )
    extract_manager = ExtractManager(extractor_modules)

    striker = CobaltStrike(extract_manager)
    config: dict = striker.cobaltstrike(p=payload, addr=addr)
    assert "cobaltstrike" in config
