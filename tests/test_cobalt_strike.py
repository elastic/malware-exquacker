import base64
import os
import zlib

from elasticsearch import Elasticsearch
from malduck import procmem
from malduck.extractor import ExtractManager, ExtractorModules
from scalpl import Cut

from elastic.malware_config_extractor.modules.cobalt_strike import CobaltStrike
from elastic.malware_config_extractor.transform import MalduckTransform


# debugging path problems
def test_current():
    print(f" CURRENT PATH IS {os.getenv('PYTEST_CURRENT_TEST')}")


def test_from_file():
    """unit test for the module"""
    with procmem.from_file("tests/beacon-sample.bin") as p:
        mem: bytes = p.readv(addr=0)

    extractor_modules = ExtractorModules(modules_path=os.path.join(os.path.dirname(__file__), "modules"))
    extract_manager = ExtractManager(extractor_modules)

    striker = CobaltStrike(extract_manager)  # todo: this is throwing an error
    config: dict = striker.cobaltstrike(p=mem)
    assert "cobaltstrike" in config


def test_from_telemetry_data():
    """integration test, pulls a known cobalt strike sample from the analytics cluster using the id"""

    query = {
        "query": {"match": {"_id": "MYmZpgexS5wCm6JS+++++/DM-2022-04-05T20:27:17Z"}}
    }

    api_key = (
        base64.b64decode(os.getenv("INPUT_ELASTICSEARCH_APIKEY"))
        .decode("utf-8")
        .split(":")
    )
    es = Elasticsearch(
        hosts=["https://394b04bd8a174e369434da90bf3701f4.us-east-1.aws.found.io:9243"],
        api_key=(api_key[0], api_key[1]),
    )

    result = es.search(body=query, index="alert_telemetry_elastic")

    cobalt_strike_bytes = result["hits"]["hits"][0]["_source"]["process"]["Ext"][
        "memory_region"
    ]["bytes_compressed"]
    payload = zlib.decompress(base64.b64decode(cobalt_strike_bytes))
    addr = result["hits"]["hits"][0]["_source"]["Target"]["process"]["thread"]["Ext"][
        "start_address_bytes"
    ]
    mt = MalduckTransform()
    extractor_modules = ExtractorModules(modules_path=mt.config["modules"])
    mt.extract_manager = ExtractManager(extractor_modules)
    mt._setup_modules()
    # doc_generator = mt.transform() #don't think we need these?
    # payload = next(doc_generator)
    striker = CobaltStrike()
    config: dict = striker.cobaltstrike(p=payload, addr=addr)
    assert "cobaltstrike" in config
