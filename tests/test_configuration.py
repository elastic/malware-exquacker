import os
from functools import partial, reduce
from logging import getLogger
from typing import Dict, TextIO
from unittest.mock import mock_open, patch

import click
from marshmallow import Schema
from ruamel.yaml import YAML

from elastic.malware_config_extractor.config import (
    MalwareExtractorConfigSchema,
    get_environ_config,
)
from elastic.malware_config_extractor.console import configure
from elastic.malware_config_extractor.utils import dedot_keys, merge_dict

logger = getLogger(__name__)

RESULT_DEFAULT_CONFIG = {
    "output": {
        "console": {"enabled": False, "pretty": False},
        "elasticsearch": {
            "hosts": ["localhost:9200"],
            "enabled": True,
            "ssl_verify": True,
            "index": "logs-malware-config-extraction-*",
        },
    },
    "input": {
        "elasticsearch": {
            "hosts": ["localhost:9200"],
            "enabled": True,
            "ssl_verify": True,
            "index": "logs-endpoint.alerts-*",
        }
    },
}

TEST_YAML_CFG = """
---
input.elasticsearch.enabled: true
input.elasticsearch.cloud.id: "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1"
input.elasticsearch.cloud.auth: "elastic:changeme"
output:
    elasticsearch:
        enabled: No  # Any valid truthy/falsey should work
    console:
        enabled: 1
"""

TEST_ENV_CFG = {
    "INPUT_ELASTICSEARCH_ENABLED": "False",
    "INPUT_ELASTICSEARCH_SSLVERIFY": "False",
    "CLOUD_ID": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
    "CLOUD_AUTH": "elastic:changeme",
    "INPUT_ELASTICSEARCH_INDEX": "logs-foo-something-*",
}


def test_default_config():
    schema: Schema = MalwareExtractorConfigSchema()
    _cfg: dict = schema.dump(schema.load({}))

    assert isinstance(schema, Schema)
    assert _cfg == RESULT_DEFAULT_CONFIG


RESULT_ENVIRON_CONFIG = {
    "output": {
        "elasticsearch": {
            "cloud": {
                "auth": "elastic:changeme",
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            },
            "hosts": ["localhost:9200"],
            "index": "logs-malware-config-extraction-*",
        }
    },
    "input": {
        "elasticsearch": {
            "cloud": {
                "auth": "elastic:changeme",
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            },
            "enabled": False,
            "ssl_verify": False,
            "hosts": ["localhost:9200"],
            "index": "logs-foo-something-*",
        }
    },
}


@patch.dict(os.environ, TEST_ENV_CFG, clear=True)
def test_environ_config():
    schema: Schema = MalwareExtractorConfigSchema()

    _env: Dict = get_environ_config()
    schema: Schema = MalwareExtractorConfigSchema()
    _cfg: Dict = schema.dump(schema.load(_env))

    assert _cfg == RESULT_ENVIRON_CONFIG


RESULT_YAML_CONFIG = {
    "input": {
        "elasticsearch": {
            "cloud": {
                "auth": "elastic:changeme",
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            },
            "hosts": ["localhost:9200"],
            "index": "logs-endpoint.alerts-*",
            "ssl_verify": True,
            "enabled": True,
        }
    },
    "output": {
        "elasticsearch": {
            "hosts": ["localhost:9200"],
            "ssl_verify": True,
            "index": "logs-malware-config-extraction-*",
            "enabled": False,
        },
        "console": {"enabled": True, "pretty": False},
    },
}


def test_yaml_config():
    schema: Schema = MalwareExtractorConfigSchema()
    yaml = YAML(typ="safe")

    _yaml: dict = dedot_keys(yaml.load(TEST_YAML_CFG))
    schema: Schema = MalwareExtractorConfigSchema()

    _cfg: Dict = schema.dump(schema.load(_yaml))

    assert _cfg == RESULT_YAML_CONFIG


RESULT_COMBINED_CONFIG = {
    "output": {
        "console": {"pretty": False, "enabled": True},
        "elasticsearch": {
            "index": "logs-malware-config-extraction-*",
            "ssl_verify": True,
            "hosts": ["localhost:9200"],
            "enabled": False,
            "cloud": {
                "auth": "elastic:changeme",
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            },
        },
    },
    "input": {
        "elasticsearch": {
            "index": "logs-foo-something-*",
            "ssl_verify": False,
            "hosts": ["localhost:9200"],
            "enabled": False,
            "cloud": {
                "auth": "elastic:changeme",
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            },
        }
    },
}


@patch.dict(os.environ, TEST_ENV_CFG, clear=True)
def test_combined_config():
    schema: Schema = MalwareExtractorConfigSchema()
    yaml = YAML(typ="safe")

    schema: Schema = MalwareExtractorConfigSchema()

    _cfg: Dict = schema.dump(schema.load({}))
    _yaml: Dict = dedot_keys(yaml.load(TEST_YAML_CFG))
    _yaml = schema.dump(schema.load(_yaml))
    _env: Dict = get_environ_config()
    _env = schema.dump(schema.load(_env))

    reduce(partial(merge_dict, overwrite=True), [_cfg, _yaml, _env])

    assert _cfg == RESULT_COMBINED_CONFIG


@patch("builtins.open", new_callable=mock_open, read_data=TEST_YAML_CFG)
@patch.dict(os.environ, TEST_ENV_CFG, clear=True)
def test_config_func(mock_file: TextIO):
    CFG_FILENAME = "config.yml"
    with click.Context(click.Command(name="test_config_func")) as _ctx:
        _cfg = configure(ctx=_ctx, param=None, filename=CFG_FILENAME)
    logger.info(f"_cfg: {_cfg}")
    mock_file.assert_called_with(CFG_FILENAME, mode="rt")

    assert _cfg == RESULT_COMBINED_CONFIG
