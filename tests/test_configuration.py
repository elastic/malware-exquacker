import os
from logging import getLogger
from typing import Dict
from unittest import mock

from marshmallow import Schema
from ruamel.yaml import YAML

from elastic.malware_config_extractor.config import (
    MalwareExtractorConfigSchema,
    get_environ_config,
)
from elastic.malware_config_extractor.utils import dedot_keys

logger = getLogger(__name__)

DEFAULT_CONFIG = {
    "output": {
        "console": {"enabled": False, "pretty": False},
        "elasticsearch": {
            "hosts": ["localhost:9200"],
            "enabled": True,
            "ssl_verify": True,
            "index": "logs-malware-config-extraction-*",
        },
    },
    "input": {
        "elasticsearch": {
            "hosts": ["localhost:9200"],
            "enabled": True,
            "ssl_verify": True,
            "index": "logs-endpoint.alerts-*",
        }
    },
}


def test_default_config():
    schema: Schema = MalwareExtractorConfigSchema()
    _cfg: dict = schema.dump(schema.load({}))

    assert isinstance(schema, Schema)
    assert _cfg == DEFAULT_CONFIG


ENVIRON_CONFIG = {
    "output": {
        "elasticsearch": {
            "cloud": {
                "auth": "elastic:changeme",
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            },
            "hosts": ["localhost:9200"],
            "index": "logs-malware-config-extraction-*",
        }
    },
    "input": {
        "elasticsearch": {
            "cloud": {
                "auth": "elastic:changeme",
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            },
            "enabled": False,
            "ssl_verify": False,
            "hosts": ["localhost:9200"],
            "index": "logs-endpoint.alerts-*",
        }
    },
}


def test_environ_config():
    schema: Schema = MalwareExtractorConfigSchema()

    with mock.patch.dict(
        os.environ,
        {
            "INPUT_ELASTICSEARCH_ENABLED": "False",
            "INPUT_ELASTICSEARCH_SSLVERIFY": "False",
            "CLOUD_ID": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            "CLOUD_AUTH": "elastic:changeme",
        },
    ):
        _env: Dict = get_environ_config()
        schema: Schema = MalwareExtractorConfigSchema()
        _cfg: Dict = schema.dump(schema.load(_env))

        assert _cfg == ENVIRON_CONFIG


YAML_TEST_CFG = {
    "input": {
        "elasticsearch": {
            "cloud": {
                "auth": "elastic:changeme",
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            },
            "hosts": ["localhost:9200"],
            "index": "logs-endpoint.alerts-*",
            "ssl_verify": True,
            "enabled": True,
        }
    },
    "output": {
        "elasticsearch": {
            "hosts": ["localhost:9200"],
            "ssl_verify": True,
            "index": "logs-malware-config-extraction-*",
            "enabled": False,
        },
        "console": {"enabled": True, "pretty": False},
    },
}


def test_yaml_config():
    schema: Schema = MalwareExtractorConfigSchema()
    yaml = YAML(typ="safe")

    _yaml = """
---
input.elasticsearch.enabled: true
input.elasticsearch.cloud.id: "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1"
input.elasticsearch.cloud.auth: "elastic:changeme"
output:
    elasticsearch:
        enabled: No  # Any valid truthy/falsey should work
    console:
        enabled: 1
"""
    _ydict: dict = dedot_keys(yaml.load(_yaml))
    schema: Schema = MalwareExtractorConfigSchema()

    _cfg: Dict = schema.dump(schema.load(_ydict))

    assert _cfg == YAML_TEST_CFG


COMBINED_TEST_CFG = {
    "output": {
        "elasticsearch": {
            "index": None,
            "enabled": None,
            "hosts": None,
            "ssl_verify": None,
            "cloud": {
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
                "auth": "elastic:changeme",
            },
            "api_key": None,
            "username": None,
            "password": None,
        },
        "console": {"enabled": None, "pretty": None},
    },
    "input": {
        "elasticsearch": {
            "index": "logs-foo-something-*",
            "enabled": "False",
            "hosts": None,
            "ssl_verify": "False",
            "cloud": {
                "id": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
                "auth": "elastic:changeme",
            },
            "api_key": None,
            "username": None,
            "password": None,
        }
    },
}


def test_combined_config():
    schema: Schema = MalwareExtractorConfigSchema()
    yaml = YAML(typ="safe")

    _yaml = """
---
input.elasticsearch.enabled: true
input.elasticsearch.cloud.id: "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1"
input.elasticsearch.cloud.auth: "elastic:changeme"
output:
    elasticsearch:
        enabled: No  # Any valid truthy/falsey should work
    console:
        enabled: 1
"""
    _yaml: Dict = dedot_keys(yaml.load(_yaml))
    _env: Dict = {}
    with mock.patch.dict(
        os.environ,
        {
            "INPUT_ELASTICSEARCH_ENABLED": "False",
            "INPUT_ELASTICSEARCH_SSLVERIFY": "False",
            "CLOUD_ID": "security-cluster:dXMtd2VzdDEuZ2NwLmNsb3VkLmVzLmlvJGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1JGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1",
            "CLOUD_AUTH": "elastic:changeme",
            "INPUT_ELASTICSEARCH_INDEX": "logs-foo-something-*",
        },
    ):
        _env = get_environ_config()

    schema: Schema = MalwareExtractorConfigSchema()

    _default: list[Dict] = schema.dump(schema.load({}))
    _cfg = {**_default, **_yaml, **_env}

    assert _cfg == COMBINED_TEST_CFG
