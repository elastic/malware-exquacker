from logging import getLogger
from typing import Dict

from scalpl import Cut

logger = getLogger(__name__)


class DeepChainMap(dict):
    """
    https://www.saltycrane.com/blog/2014/02/recursive-chained-map-lookups/
    """

    def __init__(self, *maps):
        self._maps = maps

    def __getitem__(self, key):
        values = []
        for mapping in self._maps:
            try:
                values.append(mapping[key])
            except KeyError:
                pass

        if not values:
            raise KeyError(key)

        first = values.pop(0)
        rv = first
        if isinstance(first, dict):
            values = [x for x in values if isinstance(x, dict)]
            if values:
                values.insert(0, first)
                rv = self.__class__(*values)
        return rv

    def __repr__(self):
        return "{0.__class__.__name__}({1})".format(
            self, ", ".join(map(repr, self._maps))
        )


def dedot_keys(d: Dict) -> Dict:
    _c = Cut({})
    for k, v in d.items():
        logger.debug(f"{k} -> ({type(v)}) {v}")
        _c.setdefault(k, v)

    return dict(_c)
