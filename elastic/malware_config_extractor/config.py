import os
from dataclasses import dataclass, field
from functools import partial
from typing import Dict, Optional

import marshmallow_dataclass
from marshmallow import Schema, post_dump

from .utils import dedot_keys

DEFAULT_INPUT_INDEX = "logs-endpoint.alerts-*"
DEFAULT_OUTPUT_INDEX = "logs-malware-config-extraction-*"


class BaseSchema(Schema):
    # Remove None fields
    @post_dump
    def remove_skip_values(self, data, many):
        def scrub_nones(d: dict) -> dict:
            return {
                key: value
                for key, value in d.items()
                if value is not None and value != {}
            }

        if many is True:
            return [scrub_nones(x) for x in data]
        else:
            return scrub_nones(data)


@dataclass
class ElasticsearchConfig:
    @dataclass
    class CloudConfig:
        id: Optional[str] = None
        auth: Optional[str] = None

    index: Optional[str]
    hosts: Optional[list[str]] = field(default_factory=list)

    enabled: Optional[bool] = field(default=True)
    ssl_verify: Optional[bool] = field(default=True)
    cloud: Optional[CloudConfig] = field(default_factory=CloudConfig)

    api_key: Optional[str] = None
    username: Optional[str] = None
    password: Optional[str] = None

    def __post_init__(self) -> None:
        if self.hosts is None or len(self.hosts) == 0:
            self.hosts = ["localhost:9200"]


@dataclass
class ConsoleOutputConfig:
    enabled: Optional[bool] = field(default=False)
    pretty: Optional[bool] = field(default=False)


@dataclass
class MalwareExtractorConfiguration:
    @dataclass
    class InputConfig:
        elasticsearch: Optional[ElasticsearchConfig] = field(
            default_factory=partial(ElasticsearchConfig, index=DEFAULT_INPUT_INDEX)
        )

        @post_dump
        def default_index_fallback(self, data, many):
            """
            If an `input.elasticsearch` value is passed and it doesn't contain an index
            name, it will be omitted. This adds it if unset.
            """

            def set_default_index(d: dict):
                if "elasticsearch" in d and "index" not in d["elasticsearch"]:
                    d["elasticsearch"]["index"] = DEFAULT_INPUT_INDEX

            if many:
                for item in data:
                    set_default_index(item)
            else:
                set_default_index(data)

            return data

    @dataclass
    class OutputConfig:
        elasticsearch: Optional[ElasticsearchConfig] = field(
            default_factory=partial(ElasticsearchConfig, index=DEFAULT_OUTPUT_INDEX)
        )
        console: Optional[ConsoleOutputConfig] = field(
            default_factory=ConsoleOutputConfig
        )

        @post_dump
        def default_index_fallback(self, data, many):
            """
            If an `output.elasticsearch` value is passed and it doesn't contain an index
            name, it will be omitted. This adds it if unset.
            """

            def set_default_index(d: dict):
                if "elasticsearch" in d and "index" not in d["elasticsearch"]:
                    d["elasticsearch"]["index"] = DEFAULT_OUTPUT_INDEX

            if many:
                for item in data:
                    set_default_index(item)
            else:
                set_default_index(data)

            return data

    @dataclass
    class MalduckConfig:
        modules: Optional[str] = None

    input: Optional[InputConfig] = field(default_factory=InputConfig)
    malduck: Optional[MalduckConfig] = field(default_factory=MalduckConfig)
    output: Optional[OutputConfig] = field(default_factory=OutputConfig)


environment_map: dict = {
    "input.elasticsearch.index": "INPUT_ELASTICSEARCH_INDEX",
    "input.elasticsearch.enabled": "INPUT_ELASTICSEARCH_ENABLED",
    "input.elasticsearch.hosts": "INPUT_ELASTICSEARCH_HOSTS",
    "input.elasticsearch.ssl_verify": "INPUT_ELASTICSEARCH_SSLVERIFY",
    "input.elasticsearch.cloud.id": "CLOUD_ID",
    "input.elasticsearch.cloud.auth": "CLOUD_AUTH",
    "input.elasticsearch.api_key": "INPUT_ELASTICSEARCH_APIKEY",
    "input.elasticsearch.username": "INPUT_ELASTICSEARCH_USERNAME",
    "input.elasticsearch.password": "INPUT_ELASTICSEARCH_PASSWORD",
    "output.elasticsearch.index": "OUTPUT_ELASTICSEARCH_INDEX",
    "output.elasticsearch.enabled": "OUTPUT_ELASTICSEARCH_ENABLED",
    "output.elasticsearch.hosts": "OUTPUT_ELASTICSEARCH_HOSTS",
    "output.elasticsearch.ssl_verify": "OUTPUT_ELASTICSEARCH_SSLVERIFY",
    "output.elasticsearch.cloud.id": "CLOUD_ID",
    "output.elasticsearch.cloud.auth": "CLOUD_AUTH",
    "output.elasticsearch.api_key": "OUTPUT_ELASTICSEARCH_APIKEY",
    "output.elasticsearch.username": "OUTPUT_ELASTICSEARCH_USERNAME",
    "output.elasticsearch.password": "OUTPUT_ELASTICSEARCH_PASSWORD",
    "output.console.enabled": "OUTPUT_CONSOLE_ENABLED",
    "output.console.pretty": "OUTPUT_CONSOLE_PRETTY",
    "malduck.modules": "MALDUCK_MODULES",
}

MalwareExtractorConfigSchema = marshmallow_dataclass.class_schema(
    MalwareExtractorConfiguration, base_schema=BaseSchema
)


def get_environ_config() -> Dict:
    _d: Dict = {k: os.environ.get(v) for k, v in environment_map.items()}
    return dedot_keys(_d)
