from __future__ import annotations

import json
import logging
import os
from functools import partial, reduce
from multiprocessing import Event, Queue, synchronize
from typing import Any, Dict

import click
import ecs_logging
from marshmallow import Schema
from ruamel.yaml import YAML
from scalpl import Cut

from elastic.malware_config_extractor.config import (
    MalwareExtractorConfigSchema,
    get_environ_config,
)
from elastic.malware_config_extractor.input import AlertSampleESInput
from elastic.malware_config_extractor.output import ESOutput
from elastic.malware_config_extractor.process import POISON_PILL, LoggerProcess
from elastic.malware_config_extractor.transform import MalduckTransform
from elastic.malware_config_extractor.utils import dedot_keys, merge_dict

PACKAGE_NAME = "elastic.malware_config_extractor"
DEFAULT_CONFIG = "config.yml"
logging.basicConfig(level=logging.NOTSET)
logger = logging.getLogger(__name__)

logo: str = """
                ░░░░░░░░░░░░
              ░░░░░░      ░░░░                                                          *****   **    **              ***
            ░░░░░░            ░░                                                     ******  ***** *****               ***
          ░░░░░░░░░░░░░░      ░░                                                    **   *  *  ***** *****              **    **
          ░░░░░░░░░░░░░░░░░░    ░░                                                 *    *  *   * **  * **               **    **
          ░░░░░░░░░░▓▓▓▓░░░░    ░░                                                     *  *    *     *                  **     **    ***    ****                ***  ****
          ░░░░░░░░▓▓░░▒▒▓▓░░░░    ░░                                                  ** **    *     *        ****      **      **    ***     ***  *    ****     **** **** *    ***
        ░░░░░░░░░░░░░░░░░░░░░░    ░░                                                  ** **    *     *       * ***  *   **      **     ***     ****    * ***  *   **   ****    * ***
▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░░░░░    ░░                                                  ** **    *     *      *   ****    **      **      **      **    *   ****    **          *   ***
▓▓▓▓░░  ░░██▓▓░░░░░░░░░░░░░░░░    ░░                                                  ** **    *     *     **    **     **      **      **      **   **    **     **         **    ***
  ▓▓▓▓▒▒▒▒▒▒▓▓▓▓░░░░░░░░░░░░░░░░  ░░                                                  ** **    *     **    **    **     **      **      **      **   **    **     **         ********
  ▒▒▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░░░░░░░  ░░                                                  *  **    *     **    **    **     **      **      **      **   **    **     **         *******
      ▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░░░░░  ░░                    ░░░░                               *     *      **   **    **     **      **      **      *    **    **     **         **
      ░░░░▒▒▒▒░░░░░░░░░░░░░░░░  ░░                    ░░░░░░                         ****      *      **   **    **     **       ******* *******     **    **     ***        ****    *
            ▒▒░░░░░░░░░░░░░░░░░░                      ░░░░░░░░                      *  *****           **   ***** **    *** *     *****   *****       ***** **     ***        *******
              ▒▒░░░░░░░░░░░░░░                          ▒▒  ░░░░                   *     **                  ***   **    ***                           ***   **                *****
            ▒▒░░░░░░░░░░░░░░░░                          ▒▒░░    ░░                 *
          ░░░░░░░░░░░░░░                              ▒▒░░      ░░░░                **
        ▒▒░░░░░░░░░░░░░░  ░░                        ▒▒    ░░      ░░
      ▒▒░░░░░░░░░░░░░░░░  ▒▒                    ░░▒▒      ░░░░    ░░
    ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░      ░░░░
  ░░░░░░░░░░░░░░░░░░░░░░░░░░  ░░░░░░░░░░░░░░░░░░        ░░░░░░
  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░                        ░░░░░░░░░░                ***** **                         * ***                                          *
  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░                  ░░░░░░░░░░░░░░           ******  **** *                    *  ****                                        **
░░░░░░░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░        ░░░░░░░░░░░░░░░░░░░░          **   *  * ****                    *  *  ***                                       **
░░░░░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░         *    *  *   **                    *  **   ***                                      **
░░░░░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░             *  *          ***    ***     *  ***    *** **   ****                           **                   ***  ****
░░░░░░░░░░░░░░░░░░░░▒▒░░░░      ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░          ** **         * ***  **** *  **   **     **  **    ***  *    ****       ****    **  ***       ***     **** **** *
▒▒░░░░░░░░░░░░░░░░░░░░▒▒░░          ░░░░░░░░░░░░░░░░  ░░░░░░░░░░░░░░          ** **            *** *****   **   **     **  **     ****    * ***  *   * ***  * ** * ***     * ***     **   ****
▒▒░░░░░░░░░░░░░░░░░░░░▒▒░░░░            ░░░░░░░░    ░░░░▒▒░░░░░░░░░░          ** ******         ***  **    **   **     **  **      **    *   ****   *   ****  ***   *     *   ***    **
▒▒░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░                  ░░░░░░▒▒░░░░░░░░░░░░          ** *****           ***       **   **     **  **      **   **    **   **         **   *     **    ***   **
  ▒▒░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░          ░░░░░░▒▒▒▒▒▒░░░░░░░░░░▒▒          ** **             * ***      **   **     **  **      **   **    **   **         **  *      ********    **
  ░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░          *  **            *   ***      **  ** *** **  **      **   **    **   **         ** **      *******     **
  ░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░░░▒▒░░             *            *     ***      ** *   ****   **      **   **    **   **         ******     **          **
  ░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░▒▒▒▒           ****         *  *       *** *    ***     ***   ******* **  **    **   ***     *  **  ***    ****    *   ***
    ▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓            *  ***********  *         ***      ******* **    *****   **  ***** **   *******   **   *** *  *******     ***
      ░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░             *     ******                          ***   **                 ***   **   *****     **   ***    *****
        ░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒                   *                                           **
            ▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░                    **                                         *
              ▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒                                                                  *
                ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░                                                                     *


"""

enable_art = False


def setup_logging(ctx, param, verbosity: int):
    """

    :param ctx: what is this?
    :param param: and this?
    :param verbosity: set log level
    :return:
    """

    if verbosity is None:
        verbosity = 0

    if verbosity > 3:
        verbosity = 3

    pkglogger = logging.getLogger(PACKAGE_NAME)
    rootlog = logging.getLogger()

    _level: str = {0: "WARNING", 1: "INFO", 2: "DEBUG", 3: "NOTSET"}[verbosity]
    pkglogger.setLevel(_level)
    logger.setLevel(_level)

    if os.environ.get("ECS_LOG", None) is not None:
        # Add an ECS formatter to the Handler
        handler = logging.StreamHandler()
        handler.setFormatter(ecs_logging.StdlibFormatter())
        rootlog.handlers = [handler]
    else:
        if verbosity > 2:
            _format = "[%(asctime)s.%(msecs)03d][%(filename)20s, line %(lineno)-4s][%(threadName)s][%(name)s][ %(funcName)20s() ][%(levelname)s] %(message)s"
        else:
            _format = "[%(asctime)s.%(msecs)03d][%(levelname)s] %(message)s"

        logging.basicConfig(format=_format, datefmt="%Y-%m-%dT%H:%M:%S", force=True)

    # Pull back 3rd party loggers
    eslog = logging.getLogger("elasticsearch")
    eslog.setLevel("WARN")

    mdlog = logging.getLogger("malduck")
    mdlog.setLevel("WARN")

    cscelog = logging.getLogger("libcsce")
    cscelog.setLevel("WARN")

    urllog = logging.getLogger("urllib3")
    urllog.setLevel("WARN")


def configure(ctx, param, filename):
    """
    You can replace a lot of this with pyyaml I think and then just do a simple dict merge
    instead of a reduce partial ?

    :param ctx: what is this?
    :param param: and this?
    :param filename: example?
    :return: _cfg (dict?)
    """
    logger.debug("Running configure() to process %s", filename)
    schema: Schema = MalwareExtractorConfigSchema()

    yaml_reader = YAML(typ="safe")

    # Get defaults
    _cfg: Dict[str, list[Any] | Any] = schema.dump(schema.load({}))  # type: ignore
    _yaml: Dict[str, list[Any] | Any] = {}
    try:
        with open(filename, mode="rt", encoding="utf-8") as _fh:
            _yaml = dedot_keys(yaml_reader.load(_fh))
    except FileNotFoundError:
        pass

    _yaml = schema.dump(schema.load(_yaml))  # type: ignore

    _env: Dict[str, list[Any] | Any] = get_environ_config()
    _env = schema.dump(schema.load(_env))  # type: ignore

    # Merge all configs: env overides yaml overrides defaults
    reduce(partial(merge_dict, overwrite=True), [_cfg, _yaml, _env])

    logger.debug("result: %s", _cfg)

    ctx.config = _cfg

    return _cfg


@click.command()
@click.option(
    "-v",
    help="Increase verbosity of output (up to 3)",
    count=True,
    is_eager=True,
    default=0,
    type=click.INT,
    callback=setup_logging,
)
@click.option(
    "-c",
    "--config",
    type=click.Path(dir_okay=False),
    default=DEFAULT_CONFIG,
    callback=configure,
    is_eager=True,
    expose_value=False,
    help="Read options from the specified YAML file",
    show_default=True,
)
@click.option(
    "--daemon/--oneshot",
    default=False,
    is_flag=True,
    help="Detach and execute in the background or just run once",
    show_default=True,
)
@click.option(
    "--setup",
    help="Setup the output index pattern and mappings (will overwrite)",
    default=False,
    is_flag=True,
    show_default=True,
)
@click.option(
    "--poll-interval",
    default=1440,
    type=click.IntRange(min=0, min_open=True),
    help="Duration in minutes between searches when --daemon is true",
    show_default=True,
)
@click.option(
    "--since",
    type=click.STRING,
    help="ISO datetime string or Elastic datemath for earliest event",
)
@click.option(
    "--before",
    type=click.STRING,
    help="ISO datetime string or Elastic datemath for latest event",
)
@click.version_option(package_name=PACKAGE_NAME)
@click.pass_context
def main(ctx, **kwargs):

    logger.info("Entering main")

    if enable_art:
        print(logo)

    logger.debug("Got extra kwargs: %s", json.dumps(kwargs, sort_keys=True, indent=4))

    _cfg: Cut = Cut(ctx.config)
    _cfg["setup"] = kwargs.get("setup", False)

    shutdown: synchronize.Event = Event()
    in_to_extract: Queue = Queue()
    extract_to_out: Queue = Queue()
    log_queue: Queue = Queue()
    log_level: str = logging.getLevelName(logger.getEffectiveLevel())

    logger_proc = LoggerProcess(logq=log_queue, log_level=log_level, shutdown=shutdown)
    logger_proc.start()

    es_input_proc = AlertSampleESInput(
        config=_cfg["input.elasticsearch"],
        outq=in_to_extract,
        logq=log_queue,
        log_level=log_level,
        shutdown=shutdown,
        background=kwargs.get("daemon", False),
        poll_interval=kwargs["poll_interval"],
        since=kwargs["since"],
        before=kwargs["before"],
        name="ESInput",
    )

    malduck_transform_proc = MalduckTransform(
        config=_cfg["malduck"],
        inq=in_to_extract,
        outq=extract_to_out,
        logq=log_queue,
        log_level=log_level,
        shutdown=shutdown,
        name="MalduckTransform",
    )
    es_output_proc = ESOutput(
        config=_cfg["output.elasticsearch"],
        inq=extract_to_out,
        logq=log_queue,
        log_level=log_level,
        shutdown=shutdown,
        name="ESOutput",
        do_setup=_cfg["setup"],
    )

    _procs = [es_input_proc, malduck_transform_proc, es_output_proc]

    for _p in _procs:
        _p.start()

    es_input_proc.join()
    if not all(map(lambda proc: proc.is_alive(), _procs)):
        shutdown.set()

    in_to_extract.put(POISON_PILL)

    for _p in _procs:
        _p.join()

    log_queue.put_nowait(POISON_PILL)
    logger_proc.join()

    logger.info("All done.")


if __name__ == "__main__":
    main()
