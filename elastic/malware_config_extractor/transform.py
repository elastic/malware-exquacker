import json
from logging import getLogger
from queue import Queue

import click
from malduck.extractor import ExtractManager, ExtractorModules
from malduck.procmem import ProcessMemory
from scalpl import Cut

from .thread import BaseThread

logger = getLogger(__name__)


class MalduckTransform(BaseThread):
    def __init__(self, config: Cut, taskq: Queue, outq: Queue, **kwargs) -> None:
        super().__init__(**kwargs)

        self.config: Cut = config
        self.modules = None
        self.samples = None
        self.taskq = taskq
        self.outq = outq

        logger.debug(f"Parsed input config: {self.config}")

    def _setup_modules(self):
        # Set up the module paths.
        if self.config["modules"]:
            logger.info("Getting os path of malduck modules...")
            self.modules = (
                self.config["modules"]
                if self.config["modules"]
                else logger.error("Please specify Malduck module path.")
            )

    def _setup_path_to_samples(self):
        # Set up the (optional) path to the samples dir.
        if self.config["samples"]:
            logger.info("Getting os path of samples...")
            self.samples = (
                self.config["samples"]
                if self.config["samples"]
                else logger.error(
                    "Please specify the path to \
                                  a dir of malware samples for analysis."
                )
            )

    def echo_config(self, extract_manager, file_path=None):
        if extract_manager.config:
            for config in extract_manager.config:
                family = config["family"]
                message = (
                    f"[+] Ripped '{family}' from bytes stream:"
                    if file_path is not None
                    else f"[+] Ripped '{family}' configuration:"
                )
                click.echo(message, err=True)
                click.echo(json.dumps(config, indent=4, sort_keys=True))

    def run(self) -> None:
        self._setup_modules()
        self._setup_path_to_samples()
        try:
            # Attempt to get data from the queue.
            # .get() will block this thread's execution
            # until data is available
            malduck_bytes = self.taskq.get()

            if self.taskq.empty():
                # Calls the Malduck 'extract' command with sample path in cfg.
                click.echo("Task queue empty, waiting...", err=True)
            else:
                # Calls Malduck 'extract' command with bytes passed to q.
                extractor_modules = ExtractorModules(self.modules)
                extract_manager = ExtractManager(extractor_modules)

                if not extract_manager.extractors:
                    logger.exception(
                        f"[!] No extractor modules found \
                                     under '{self.modules}'!"
                    )

                _ = extract_manager.push_procmem(
                    ProcessMemory(malduck_bytes), rip_binaries=True
                )
                self.echo_config(extract_manager)

        except Exception as err:
            logger.exception(err)
