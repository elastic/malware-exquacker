from logging import getLogger
from queue import Queue
from threading import Thread

import click
from malduck import main as malduck
from scalpl import Cut  # See https://github.com/ducdetronquito/scalpl

logger = getLogger(__name__)


class MalduckTransform(Thread):
    def __init__(self, config: Cut, taskq: Queue, outq: Queue) -> None:
        super().__init__()

        self.config: Cut = config
        self.modules = None
        self.samples = None
        self.taskq = taskq
        self.outq = outq

        logger.debug(f"Parsed input config: {self.config}")

    def _setup_modules(self):
        # Set up the module paths.
        if self.config["modules"]:
            logger.info("Getting os path of malduck modules...")
            self.modules = self.config["modules"] if self.config["modules"] \
                else logger.error("Please specify Malduck module path.")

    def _setup_path_to_samples(self):
        # Set up the (optional) path to the samples dir.
        if self.config["samples"]:
            logger.info("Getting os path of samples...")
            self.samples = self.config["samples"] if self.config["samples"] \
                else logger.error("Please specify the path to \
                                  a dir of malware samples for analysis.")

    def run(self) -> None:
        self._setup_modules()
        self._setup_path_to_samples()
        try:
            # Attempt to get data from the queue.
            # .get() will block this thread's execution
            # until data is available
            malduck_sample_path = self.taskq.get()

            if self.taskq.empty():
                # Calls the Malduck 'extract' command with sample path in cfg.
                with click.Context(click.Command(name="extract")) as _ctx:
                    extraction = malduck.extract([self.samples,
                                                 "--modules", self.modules])
            else:
                # Calls Malduck 'extract' command with sample path passed to q.
                with click.Context(click.Command(name="extract")) as _ctx:
                    extraction = malduck.extract([malduck_sample_path,
                                                 "--modules", self.modules])

            return extraction

        except Exception as err:
            logger.exception(err)
