from logging import getLogger
from queue import Queue

import click
from malduck import main as malduck
from scalpl import Cut  

from .thread import BaseThread

logger = getLogger(__name__)


class MalduckTransform(BaseThread):
    def __init__(self, config: Cut, taskq: Queue, outq: Queue, **kwargs) -> None:
        super().__init__(**kwargs)

        self.config: Cut = config
        self.modules = None
        self.taskq = taskq
        self.outq = outq

        logger.debug(f"Parsed input config: {self.config}")

    def _setup_modules(self):
        if self.config["modules"]:
            logger.info("Getting os path of malduck modules...")
            self.modules = self.config["modules"] if self.config["modules"] \
                else logger.error("Please specify Malduck module path.")

    def run(self) -> None:
        self._setup_modules()
        try:
            # Attempt to get data from the queue.
            # .get() will block this thread's execution
            # until data is available
            malduck_input_event_bytes = self.taskq.get()

            # Not sure if the correct way to call malduck, but it's a start.
            with click.Context(click.Command(name="extract")) as _ctx:
                extraction = malduck.extract(ctx=_ctx,
                                             paths=malduck_input_event_bytes,
                                             base=None, analysis=False,
                                             modules=self.modules)

        except self.taskq.Empty:
            pass

