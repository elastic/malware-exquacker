from elasticsearch import Elasticsearch, helpers
from elasticsearch_dsl import connections
from scalpl import Cut

from elastic.malware_config_extractor import utils
from elastic.malware_config_extractor.mappings import setup_index
from elastic.malware_config_extractor.utils import connect_elasticsearch

logger = utils.default_logger(__name__)


class BaseLoader:
    pass


class ESEnrichedAlertLoader(BaseLoader):
    def __init__(
        self,
        config: Cut,
        do_setup: bool = False,
    ) -> None:
        self.config: Cut = config
        self.es_client: Elasticsearch | None
        self.do_setup: bool = do_setup

    def _setup_io(self):
        logger.info("Setting up output ES connection")

        if self.config["enabled"] is True:
            logger.info("Connecting to Elasticsearch for output")
            self.es_client = connect_elasticsearch(dict(self.config))

            if self.es_client:
                logger.info("Successfully connected to Elasticsearch for output")
                connections.add_connection("output", self.es_client)

    def setup(self):
        """
        Installs index template and components
        """
        if not self.es_client:
            logger.error("Elasticsearch not connected for output setup!")
            raise ConnectionError("Elasticsearch not connected for output setup")

        try:
            setup_index(self.es_client, self.config["index"])
        except ValueError as error:
            raise error

    def load(self, msg: str) -> None:

        for _ok, _action in helpers.streaming_bulk(
            client=self.es_client,
            index=self.config["index"],
            actions=msg,
        ):
            pass


class StdoutEnrichedAlertLoader(BaseLoader):
    def __init__(
        self,
    ) -> None:
        pass

    def _setup_io(self):
        pass

    def load(self, msg: str) -> None:
        logger.info(msg)
