from logging import getLogger
from queue import Queue
from threading import Thread

from scalpl import Cut

logger = getLogger(__name__)


class MalduckExtractor(Thread):
    def __init__(self, config: Cut, event_queue: Queue) -> None:
        super().__init__()
        self.config: Cut = config
        self.malduck_modules = None
        self.event_queue = event_queue

        logger.debug(f"Parsed input config: {self.config}")

    def _setup_modules(self):
        logger.info("Setting up and verifying Malduck modules")

        if self.config["modules"]:
            logger.info("Getting list of malduck modules...")

            # assuming a comma-separated string "extract,aes"
            self.malduck_modules = self.config["modules"].split(",")

            # TO DO: Check that the modules are valid.

        else:
            self.malduck_modulesa = None
            logger.error("No supported malduck modules are enabled. \
                          Please configure the input.")

    def _extract(self):
        logger.info("Running modules...")

        # To Do...

    def run(self):
        self._setup_modules()
        self._extract()
