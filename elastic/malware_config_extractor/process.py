import logging
import logging.handlers
import multiprocessing as mp
from typing import Any, Mapping, Union

POISON_PILL = None


class BaseProcess(mp.Process):
    def __init__(
        self,
        shutdown: mp.Event,
        logq: mp.Queue,
        log_level: str = "INFO",
        *args: Any,
        **kwargs: Union[Mapping[str, Any], None],
    ) -> None:
        super().__init__(*args, **kwargs)
        self.logq: mp.Queue = logq
        self.log_level: str = log_level
        self.shutdown: mp.Event = shutdown

    def run(self):
        self._setup_logger()

    def _setup_logger(self):
        h = logging.handlers.QueueHandler(self.logq)
        root = logging.getLogger()

        root.handlers.clear()
        root.addHandler(h)
        root.setLevel(self.log_level)


class InputProcess(BaseProcess):
    def __init__(self, outq: mp.Queue, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.outq: mp.Queue = outq


class FilterProcess(BaseProcess):
    def __init__(self, inq: mp.Queue, outq: mp.Queue, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.inq: mp.Queue = inq
        self.outq: mp.Queue = outq


class OutputProcess(BaseProcess):
    def __init__(self, inq: mp.Queue, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.inq: mp.Queue = inq


class LoggerProcess(BaseProcess):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def _setup_logger(self):
        root = logging.getLogger()
        root.setLevel(self.log_level)

    def run(self):
        super().run()

        while True:
            try:
                record = self.logq.get()
                if record is POISON_PILL:
                    break
                logger = logging.getLogger(record.name)
                logger.handle(record)
            except Exception:
                import sys
                import traceback

                print("Error while trying to log:", file=sys.stderr)
                traceback.print_exc(file=sys.stderr)


# def custom_hook(args: threading.ExceptHookArgs):
#     """This hook will propagate the failure to the calling thread"""
#     if isinstance(args.thread, BaseThread):
#         args.thread._exc_info = args
#         args.thread.done.set()


# # set the exception hook
# threading.excepthook = custom_hook
