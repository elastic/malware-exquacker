import json
import os
from importlib.metadata import version
from logging import getLogger
from typing import Any

from elasticsearch import Elasticsearch

from elastic.malware_config_extractor.config import DEFAULT_OUTPUT_INDEX

logger = getLogger(__name__)


def load_ecs_components(es_client: Elasticsearch) -> None:
    version: str = None

    _version_file: str = os.path.join(os.path.dirname(__file__), "ecs/version")
    _mappings_path: str = os.path.join(os.path.dirname(__file__), "ecs/generated/elasticsearch/composable")

    fieldsets = ["base", "event", "file", "process", "related", "rule", "threat"]
    with open(_version_file) as f:
        version = f.read()

    for root, _, files in os.walk(_mappings_path):
        for fname in files:
            fieldset_name, _ = os.path.splitext(os.path.basename(fname))
            if fieldset_name in fieldsets:
                component_name = f"ecs_{version.strip()}_{fieldset_name}"
                logger.debug("Loading component template %s from file %s", component_name, fname)
                template: str = None
                with open(os.path.join(root, fname)) as f:
                    template = json.loads(f.read())

                es_client.cluster.put_component_template(component_name, template)


def setup_index(es_client: Elasticsearch, index=DEFAULT_OUTPUT_INDEX) -> None:
    ver_string: str = version("elastic.malware_config_extractor").strip()
    _mappings_path: str = os.path.join(os.path.dirname(__file__), "templates/component")

    load_ecs_components(es_client)

    for root, _, files in os.walk(_mappings_path):
        for fname in files:
            fieldset_name, _ = os.path.splitext(os.path.basename(fname))

            component_name = f"esr_{ver_string}_{fieldset_name}"
            template: str = None
            with open(os.path.join(root, fname)) as f:
                template = json.loads(f.read())

            logger.debug("Loading component template %s from file %s", component_name, fname)
            es_client.cluster.put_component_template(component_name, template)

    # Setup index template
    index_template = os.path.join(os.path.dirname(__file__), "templates/template.json")
    template: dict[str, Any] = None
    with open(index_template) as f:
        template = json.loads(f.read())

    if template is None:
        raise ValueError("Something went wrong loading index template")

    template["index_patterns"].append(index)

    if not es_client.indices.exists(index):
        es_client.indices.create(index)
    else:
        logger.info("%s already exists", index)

    es_client.indices.put_index_template(index, template)
