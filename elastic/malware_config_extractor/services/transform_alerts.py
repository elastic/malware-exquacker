from confluent_kafka import Consumer, Producer
import confluent_kafka

from elastic.malware_config_extractor import config, input


def main():
    c = Consumer(
        {
            "bootstrap.servers": "kafka",
            "group.id": "malware-exquacker",
            "auto.offset.reset": "earliest",
        }
    )

    p = Producer(
        {
            "bootstrap.servers": "kafka",
        }
    )

    c.subscribe([config.QUACKABLE_ALERTS_TOPIC])

    while True:
        msg = c.poll(1.0)

        if msg is None:
            continue
        if msg.error():
            print("Consumer error: {}".format(msg.error()))
            continue

        print("Received message: {}".format(msg.value().decode("utf-8")))

        def delivery_report(err, msg):
            """Called once for each message produced to indicate delivery result.
            Triggered by poll() or flush()."""
            if err is not None:
                print(f"Message delivery failed: {err}")
            else:
                print(f"Message delivered to {msg.topic()} [{msg.partition()}]")

        # Trigger any available delivery report callbacks from previous produce() calls
        p.poll(0)

        # Asynchronously produce a message. The delivery report callback will
        # be triggered from the call to poll() above, or flush() below, when the
        # message has been successfully delivered or failed permanently.
        p.produce(
            topic=config.ENRICHED_ALERTS_TOPIC,
            key=msg.key(),
            value=msg.value(),
            callback=delivery_report,
        )

        # Wait for any outstanding messages to be delivered and delivery report
        # callbacks to be triggered.
        p.flush()


if __name__ == "__main__":
    main()
